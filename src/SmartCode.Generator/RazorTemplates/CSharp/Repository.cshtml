@using SmartCode
@using SmartCode.Db;
@using SmartCode.Generator.Extensions
@model BuildContext
@{
    Layout = "_CSharpLayout.cshtml";
    var project = Model.Project;
    var buildTask = Model.Build;
    var table = Model.GetCurrentTable();
    var pkCol = table.PKColumn;
    if (pkCol == null)
    {
        throw new SmartCodeException($"Repository Template can not find PKColumn,Table:{table.Name}.");
    }
    var primaryKeyType = pkCol.LanguageType ?? "int";
    var autoIncrement = table.AutoIncrement;
    var dbSource = Model.GetDataSource<DbSource>();

    var PKNameEQId = pkCol.ConvertedName == "Id";
}

using System;
using System.Collections.Generic;
using System.Data;
using System.Text;
using System.Threading.Tasks;
using SmartSql.DyRepository;
using SmartSql.DyRepository.Annotations;
using @(project.Module).Entity;

namespace @(project.Module).@buildTask.Module
{
    @table.GetCSharpSummary()
    public interface I@(table.ConvertedName)Repository : IRepository<@(table.ConvertedName), @(primaryKeyType)>
        ,IRepositoryAsync<@(table.ConvertedName), @(primaryKeyType)>
    {
        @if (dbSource.DbRepository.DbProvider == DbProvider.PostgreSql
&& autoIncrement)
        {
            <text>[Statement(Execute = ExecuteBehavior.QuerySingle)]</text>
            @Html.NewLine()
            @Html.PadLeft(8) <text>new @primaryKeyType Insert(@table.ConvertedName entity);</text>
            @Html.NewLine()

            <text>[Statement(Execute = ExecuteBehavior.QuerySingle)]</text>
            @Html.NewLine()
            @Html.PadLeft(8) <text>new Task<@primaryKeyType> InsertAsync(@table.ConvertedName entity);</text>
            @Html.NewLine()
        }
        else if (autoIncrement && primaryKeyType != "int")
        {
            @Html.PadLeft(8) <text>new @primaryKeyType Insert(@table.ConvertedName entity);</text>
            @Html.NewLine()

            @Html.PadLeft(8) <text>new Task<@primaryKeyType> InsertAsync(@table.ConvertedName entity);</text>
            @Html.NewLine()
        }

        @if (!PKNameEQId)
        {
            @SummaryExtensions.GetCSharpSummary("根据Id查询数据")
            @Html.NewLine()
            <text>[Statement(Id = "GetEntity")]</text>
            @Html.NewLine()
            @Html.PadLeft(8) <text>new @table.ConvertedName GetById([Param("@pkCol.ConvertedName")]@primaryKeyType id);</text>
            @Html.NewLine()

            @SummaryExtensions.GetCSharpSummary("异步根据Id查询数据")
            @Html.NewLine()
            <text>[Statement(Id = "GetEntity")]</text>
            @Html.NewLine()
            @Html.PadLeft(8) <text>new Task<@table.ConvertedName> GetByIdAsync([Param("@pkCol.ConvertedName")]@primaryKeyType id);</text>
            @Html.NewLine()

            @SummaryExtensions.GetCSharpSummary("删除数据")
            @Html.NewLine()
            <text>[Statement(Id = "Delete")]</text>
            @Html.NewLine()
            @Html.PadLeft(8) <text>new int DeleteById([Param("@pkCol.ConvertedName")]@primaryKeyType id);</text>
            @Html.NewLine()

            @SummaryExtensions.GetCSharpSummary("异步删除数据")
            @Html.NewLine()
            <text>[Statement(Id = "Delete")]</text>
            @Html.NewLine()
            @Html.PadLeft(8) <text>new Task<@("int")> DeleteByIdAsync([Param("@pkCol.ConvertedName")]@primaryKeyType id);</text>
            @Html.NewLine()

            @SummaryExtensions.GetCSharpSummary("根据条件查询总数")
            @Html.NewLine()
            <text>[Statement(Id = "GetDataRecord")]</text>
            @Html.NewLine()
            <text>int QueryDataRecord(object param);</text>
            @Html.NewLine()

            @SummaryExtensions.GetCSharpSummary("异步根据条件查询总数")
            @Html.NewLine()
            <text>[Statement(Id = "GetDataRecord")]</text>
            @Html.NewLine()
            <text>Task<@("int")> QueryDataRecordAsync(object param);</text>
            @Html.NewLine()

            @SummaryExtensions.GetCSharpSummary("根据条件进行分页查询")
            @Html.NewLine()
            <text>[Statement(Id = "QueryDataByPage")]</text>
            @Html.NewLine()
            <text>List<@("object")> QueryDataByPage(object param);</text>
            @Html.NewLine()

            @SummaryExtensions.GetCSharpSummary("异步根据条件进行分页查询")
            @Html.NewLine()
            <text>[Statement(Id = "QueryDataByPage")]</text>
            @Html.NewLine()
            <text>Task @("<List<object>>") QueryDataByPageAsync(object param);</text>
           

        }
    }
}
