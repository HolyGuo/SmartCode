@using SmartCode
@using SmartCode.Generator.Extensions
@model BuildContext
@{
    Layout = "_CSharpLayout.cshtml";
    var project = Model.Project;
    var table = Model.GetCurrentTable();
    var pkCol = table.PKColumn;
    if (pkCol == null)
    {
        throw new SmartCodeException($"Service Template can not find PKColumn,Table:{table.Name}.");
    }
    var pkType = pkCol.LanguageType;
    //var insertRetType = table.AutoIncrement ? pkType : "int";
    var insertRetType = table.AutoIncrement ? pkType : "long";
    var entityName = table.ConvertedName;
    var entityCamelName = NamingUtil.CamelCase(table.ConvertedName);
    var serviceName = $"{table.ConvertedName}Service";
    var repositoryName = $"{table.ConvertedName}Repository";
    var repositoryCamelName = NamingUtil.CamelCase(repositoryName);
}

using System;
using System.Linq;
using System.Threading.Tasks;
using System.Collections.Generic;
using @(project.Module).Entity;
using @(project.Module).Repository;

namespace @(project.Module).Service
{
    @table.GetCSharpSummary()
    public class @serviceName
    {

        ///<summary>
        ///@serviceName 仓储
        ///</summary>
        public I@(repositoryName) @repositoryName { get; }

        ///<summary>
        ///@serviceName 构造函数
        ///</summary>
        public @serviceName (I@(repositoryName) @repositoryCamelName)
        {
            @repositoryName = @repositoryCamelName;
        }

        ///<summary>
        ///新增
        ///</summary>
        public @insertRetType Insert(@entityName @entityCamelName)
        {
            return @(repositoryName).Insert(@entityCamelName);
        }

        ///<summary>
        ///异步新增
        ///</summary>
        public  async Task<@insertRetType> InsertAsync(@entityName @entityCamelName)
        {
            return await @(repositoryName).InsertAsync(@entityCamelName);
        }

        ///<summary>
        ///删除
        ///</summary>
        public int DeleteById(@pkType id)
        {
            return @(repositoryName).DeleteById(id);
        }

        ///<summary>
        ///异步删除
        ///</summary>
        public  async Task<int> DeleteByIdAsync(@pkType id)
        {
            return await @(repositoryName).DeleteByIdAsync(id);
        }

        ///<summary>
        ///更新
        ///</summary>
        public int Update(@entityName @entityCamelName)
        {
            return @(repositoryName).Update(@entityCamelName);
        }

        ///<summary>
        ///异步更新
        ///</summary>
        public async Task<int> UpdateAsync(@entityName @entityCamelName)
        {
            return await @(repositoryName).UpdateAsync(@entityCamelName);
        }

        /// <summary>
        /// 根据Id查询数据
        /// </summary>
        public @entityName GetById(long id)
        {
            return @(repositoryName).GetById(id);
        }

        /// <summary>
        /// 根据Id查询数据
        /// </summary>
        public async Task<@entityName> GetByIdAsync(long id)
        {
            return await @(repositoryName).GetByIdAsync(id);
        }

        /// <summary>
        /// 根据条件查询总数
        /// </summary>
        /// <returns></returns>
        public int QueryDataRecord(object param)
        {
            return @(repositoryName).QueryDataRecord(param);
        }

        /// <summary>
        /// 异步根据条件查询总数
        /// </summary>
        public async Task<int> QueryDataRecordAsync(object param)
        {
            return await @(repositoryName).QueryDataRecordAsync(param);
        }

        /// <summary>
        /// 根据条件进行分页查询
        /// </summary>
        public List@("<object>") QueryDataByPage(object param)
        {
            return @(repositoryName).QueryDataByPage(param);
        }

        /// <summary>
        /// 异步根据条件进行分页查询
        /// </summary>
        public async Task<@("List<object>")> QueryDataByPageAsync(object param)
        {
            return await @(repositoryName).QueryDataByPageAsync(param);
        }



    }
}
